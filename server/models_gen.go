// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package server

// An object with an ID
type Node interface {
	IsNode()
}

type AddTodoInput struct {
	Text             string  `json:"text"`
	UserID           string  `json:"userId"`
	ClientMutationID *string `json:"clientMutationId"`
}

type AddTodoPayload struct {
	TodoEdge         TodoEdge `json:"todoEdge"`
	User             User     `json:"user"`
	ClientMutationID *string  `json:"clientMutationId"`
}

type ChangeTodoStatusInput struct {
	Complete         bool    `json:"complete"`
	ID               string  `json:"id"`
	UserID           string  `json:"userId"`
	ClientMutationID *string `json:"clientMutationId"`
}

type ChangeTodoStatusPayload struct {
	Todo             Todo    `json:"todo"`
	User             User    `json:"user"`
	ClientMutationID *string `json:"clientMutationId"`
}

type MarkAllTodosInput struct {
	Complete         bool    `json:"complete"`
	UserID           string  `json:"userId"`
	ClientMutationID *string `json:"clientMutationId"`
}

type MarkAllTodosPayload struct {
	ChangedTodos     []Todo  `json:"changedTodos"`
	User             User    `json:"user"`
	ClientMutationID *string `json:"clientMutationId"`
}

// Information about pagination in a connection.
type PageInfo struct {
	// When paginating forwards, are there more items?
	HasNextPage bool `json:"hasNextPage"`
	// When paginating backwards, are there more items?
	HasPreviousPage bool `json:"hasPreviousPage"`
	// When paginating backwards, the cursor to continue.
	StartCursor *string `json:"startCursor"`
	// When paginating forwards, the cursor to continue.
	EndCursor *string `json:"endCursor"`
}

type RemoveCompletedTodosInput struct {
	UserID           string  `json:"userId"`
	ClientMutationID *string `json:"clientMutationId"`
}

type RemoveCompletedTodosPayload struct {
	DeletedTodoIds   []string `json:"deletedTodoIds"`
	User             User     `json:"user"`
	ClientMutationID *string  `json:"clientMutationId"`
}

type RemoveTodoInput struct {
	ID               string  `json:"id"`
	UserID           string  `json:"userId"`
	ClientMutationID *string `json:"clientMutationId"`
}

type RemoveTodoPayload struct {
	DeletedTodoID    string  `json:"deletedTodoId"`
	User             User    `json:"user"`
	ClientMutationID *string `json:"clientMutationId"`
}

type RenameTodoInput struct {
	ID               string  `json:"id"`
	Text             string  `json:"text"`
	ClientMutationID *string `json:"clientMutationId"`
}

type RenameTodoPayload struct {
	Todo             Todo    `json:"todo"`
	ClientMutationID *string `json:"clientMutationId"`
}

type Todo struct {
	// The ID of an object
	ID       string `json:"id"`
	Text     string `json:"text"`
	Complete bool   `json:"complete"`
}

func (Todo) IsNode() {}

// A connection to a list of items.
type TodoConnection struct {
	// Information to aid in pagination.
	PageInfo PageInfo `json:"pageInfo"`
	// A list of edges.
	Edges []*TodoEdge `json:"edges"`
}

// An edge in a connection.
type TodoEdge struct {
	// The item at the end of the edge
	Node *Todo `json:"node"`
	// A cursor for use in pagination
	Cursor string `json:"cursor"`
}

type User struct {
	// The ID of an object
	ID             string          `json:"id"`
	UserID         string          `json:"userId"`
	Todos          *TodoConnection `json:"todos"`
	TotalCount     int             `json:"totalCount"`
	CompletedCount int             `json:"completedCount"`
}

func (User) IsNode() {}
