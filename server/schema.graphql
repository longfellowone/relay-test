# orderAddProduct(orderId, itemId)
# orderRemoveProduct
# orderReceiveItem
# orderSend
# orderProcess
# orderCreate

# https://graphqlmastery.com/blog/graphql-interfaces-and-unions-how-to-design-graphql-schema

# Node interface type:id
# https://medium.com/code-oil/relay-graphql-de-mystifying-node-id-38757121b9c

# https://github.com/relayjs/relay-examples/blob/master/todo/data/schema/nodes.js

#   def self.resolve_type(type, obj, ctx)
#     case obj
#     when Post
#       Types::PostType
#     when Comment
#       Types::CommentType
#     else
#       raise("Unexpected object: #{obj}")
#     end
#   end

# id: globalIdField('User'),

# Use node interface instead?
# orderById
# ordersByProjectId
# ordersByOrganizationId

# isReadyToSend -> check all has quantity

# use enums for status
# DateTime?

# [userError] -> message!, [field!] | String
# payload fields nullable, name: type, no !

interface Node {
  id: ID!
}

type Query {
  user(id: String): User
  node(
    id: ID!
  ): Node
}

type User implements Node {
  id: ID!
  todos(after: String, first: Int, before: String, last: Int): TodoConnection
  totalCount: Int!
  completedCount: Int!
}

type TodoConnection {
  pageInfo: PageInfo!
  edges: [TodoEdge]
}

type TodoEdge {
  node: Todo
  cursor: String!
}

type Todo implements Node {
  id: ID!
  text: String!
  complete: Boolean!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}