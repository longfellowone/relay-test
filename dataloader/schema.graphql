interface Node {
    id: ID!
}

type Test implements Node {
    id: ID!
    test: String!
}

type Query {
    customers: [Customer!]
    projects: [Project!]
    node(id: ID!): Node
}

type Project implements Node{
    id: ID!
    name: String!
    orders(after: String, first: Int, before: String, last: Int): OrderConnection
}

type OrderConnection {
    pageInfo: PageInfo!
    edges: [OrderEdge]
}

type OrderEdge {
    node: Order
    cursor: String!
}

type PageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
    endCursor: String
}

type Customer {
    id: Int!
    name: String!
#    address: Address
    orders: [Order!]
}

type Address {
    id: Int!
    street: String!
    country: String!
}

type Order {
    id: Int!
    date: Time!
#    items: [Item!]
}

type Item {
    name: String!
}

scalar Time
